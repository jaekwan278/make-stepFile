ISO-10303-21;

HEADER;
FILE_DESCRIPTION(('STEP AP203'), '1');
FILE_NAME('makeSimpleSquare', '2024-08-24T12:00:00', ('jaekwan'), '', ', '', '');
FILE_SCHEMA(('CONFIG_CONTROL_DESIGN'));
ENDSEC;

DATA;
#1 = CARTESIAN_POINT('', (0.0, 0.0, 0.0));
#2 = CARTESIAN_POINT('', (10.0, 0.0, 0.0));
#3 = CARTESIAN_POINT('', (10.0, 10.0, 0.0));
#4 = CARTESIAN_POINT('', (0.0, 10.0, 0.0));

#5 = POLYLINE('', (#1, #2, #3, #4, #1));

#6 = CLOSED_SHELL('', (#5));

#7 = ADVANCED_FACE('', (#6), #8, .F.);

#8 = PLANE('', #9);

#9 = AXIS2_PLACEMENT_3D('', #1, #10, #11);
#10 = DIRECTION('', (0.0, 0.0, 1.0));
#11 = DIRECTION('', (1.0, 0.0, 0.0));
ENDSEC;

END ISO_10303-21;

/* 
* FILE_DESCRIPTION 첫번재 인자 와 FILE_SCHEMA 에 허용된 값은 파일 내의 데이터 모델이 어떤 표준을 따르고 있는지를 정의한다.
* ex >> STEP AP203 : CONFIG_CONTROL_DESIGN = 기계 설계 데이터 교환을 위한 표준. 
*/

/*
* CARTESIAN_POINT : 점의 위치 표현 / 인자 : 이름, (x, y, z)
*
* POLYLINE : CARTESIAN_POINT 개체를 사용하여 점들을 직선으로 연결하여 경로를 형성 / 인자 : 이름, (CARTESIAN_POINT ... ) 시작과 끝점을 동일하게 하여 폐곡선 형성
*
* CLOSED_SHELL : 3D형상에서 닫힌 표면을 정의 (2D는 필요 X) / 인자 : 이름, POLYLINE or ADVANCED_FACE ...
*        여러개의 ADVANCED_FACE를 포함하여 완전하게 닫힌 3D형상을 정의함.
*
* FACE_OUTER_BOUND : 면의 외곽 경계 정의 / 인자 : 이름, POLYLINE(or CURVE), .T. or .F.
*    ORIENTATION = boolean 값
*         t : 면의 경계가 외부를 향함, 법선 벡터가 경계의 외부로 향함.
*         f : 면의 경계가 내부를 향함, 법선 벡터가 경계의 내부로 향함.
*
* ADVANCED_FACE : 3D 면을 정의, 면의 외곽을 정의하고 표면을 정의 / 
*     인자 : 이름, FACE_OUTER_BOUND(외부경계) or FACE_BOUND(내부경계 : 구멍), PLANE(면이 위치할 표면), 표면의 법선 벡터(.T. or .F.)
*         t : 표면의 법선 벡터 방향이 면의 앞쪽
*         f : 반대 방향
*
* PLANE : 면이 위치할 평면 / 인자 : 이름, AXIS2_PLACEMENT_3D( 평면의 위치와 방향 )
*
* AXIS2_PLACEMENT_3D : 평면의 위치와 방향을 정의 / 인자 : 이름, CARTESIAN_POINT(좌표계의 원점 위치), DIRECTION(x 축), DIRECTION(y 축)
*
* DIRECTION : 3D 공간에서의 방향을 정의하는 벡터 / 인자 : 이름, (0.0, 0.0, 0.0) 방향
*         (1.0, 0.0, 0.0) : x축 방향 벡터
*         (0.0, 1.0, 0.0) : y축 방향 벡터
*         (0.0, 0.0, 1.0) : z축 방향 벡터
*
* EDGE_CURVE : 선분 또는 곡선을 정의하는데 사용. / 
*    인자 : 이름, 시작점(CARTESIAN_POINT), 끝점(CARTESIAN_POINT), CURVE(선분 또는 곡선의 정의(LINE, ARC, CIRCLE 등)), boolean(선분 또는 곡선의 방향이 유효한지 여부를 나타냄.)
*    boolean >> .t. : 선분 또는 곡선이 시작점에서 끝점으로 가는 방향이 일관됨. = EDGE_CURVE의 방향을 그대로 유지.
*    boolean >> .f. : 곡선의 방향이 반대로 진행됨 = 선의 끝점에서 시작점으로 가는 방향으로 설정됨
*         용도 : 면의 경계를 정의하기 위함, 경계가 외부로 향하는지 내부로 향하는지에 대한 정보를 제공, 면의 정확한 표현과 형상의 일관성을 유지하는데 중요.
*
* EDGE_LOOP : 여러개의 EDGE_CURVE 개체를 포함하여 면의 경계를 정의하는데 사용, 여러 EDGE_CURVE를 묶어 하나의 폐곡선을 정의. / 인자 : 이름, EDGE_CURVE ... 
*
* LINE : 두 점을 직선으로 연결 / 인자 : 이름, AXIS2_PLACEMENT_3D
*
* CIRCLE : 중심점과 반지름을 기준으로 원을 정의, 원형 경로를 모델링하는데 사용.
*    인자 : 이름, AXIS2_PLACEMENT_3D(원의 중심과 평면을 정의), 실수 값(반지름을 나타냄)
*          인자 예시 :
*              #1 = CARTESIAN_POINT('', (0.0, 0.0, 0.0)); >> 원의 중심점
*              #2 = DIRECTION('', (0.0, 0.0, 1.0)); >> 원이 놓일 평면의 법선 벡터 (z축)
*              #3 = AXIS2_PLACEMENT_3D('', #1, #2, $); >> 원의 중심과 평면
*              #4 = CIRCLE('', #3, 5.0); >> 반지름이 5.0인 원 정의
*
* ARC : 호(원이 일부)를 정의하는 개체. / 인자 : 이름, AXIS2_PLACEMENT_3D, 실수값(반지름), 실수값(호의 시작 각도), 실수값(호의 끝 각도)
*         ARC('', #3, 5.0, 0.0, 3.14); >> 반지름이 5.0이고 시작 각도 0, 끝 각도 3.14인 호 정의 (0도에서 시작하여 180도(3.14라디안)까지의 호를 정의.)
*         라디안 : 호도법, 
*                   파이 = 180도, 
*                    1라디안 : 180 / 파이, 
*                    1도 : 파이 / 180
*/